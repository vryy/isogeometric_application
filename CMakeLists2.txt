set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_SOURCE_DIR}/custom_cmake_modules")

# #include cotire (CMake module to hep generating precompiled header to speed-up the build process)
# include(cotire)

# include_directories( ${CMAKE_SOURCE_DIR})
# include_directories( ${CMAKE_SOURCE_DIR}/kratos)
# include_directories( ${CMAKE_SOURCE_DIR}/applications)

set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "")
set(ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS "")

# add_subdirectory(custom_external_libraries/geomod)

set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_USE_TETGEN")
# set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ENABLE_BEZIER_GEOMETRY") # this was promoted to system level
# set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ENABLE_PRECOMPUTE")

set(ISOGEOMETRIC_USE_MPI FALSE)
if(DEFINED ISOGEOMETRIC_PARMETIS_ROOT)
    set(ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS "${ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS};${ISOGEOMETRIC_PARMETIS_ROOT}/include")
    find_library(METIS_FOR_IGA_LIBRARY metis "${ISOGEOMETRIC_PARMETIS_ROOT}/lib" NO_DEFAULT_PATH)
    find_library(PARMETIS_FOR_IGA_LIBRARY parmetis "${ISOGEOMETRIC_PARMETIS_ROOT}/lib" NO_DEFAULT_PATH)
    set(ISOGEOMETRIC_USE_MPI TRUE)
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_USE_PARMETIS")
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_USE_MPI")
endif()

set(ISOGEOMETRIC_USE_GISMO FALSE)
if(DEFINED GISMO_ROOT)
    set(ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS "${ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS};${GISMO_ROOT}/include;${GISMO_ROOT}/include/gismo")
    find_library(GISMO_LIBRARY gismo PATHS ${GISMO_ROOT}/lib NO_DEFAULT_PATH)
    set(ISOGEOMETRIC_USE_GISMO TRUE)
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_USE_GISMO")
endif()

set(ISOGEOMETRIC_USE_TSPLINE FALSE)
if(DEFINED TSPLINE_DIR)
    find_package(TSPLINE QUIET)
    if(TSPLINE_FOUND MATCHES "YES")
        message(STATUS "TSPLINE_LIBRARIES:" ${TSPLINE_LIBRARIES})
        set(ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS "${ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS};${TSPLINE_INCLUDE_DIR}")
        set(ISOGEOMETRIC_USE_TSPLINE TRUE)
        set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_USE_TSPLINE")
    endif()
endif()

option(ISOGEOMETRIC_USE_BREP "Enable IsogeometricBRepApplication" OFF)
if(ISOGEOMETRIC_USE_BREP MATCHES ON)
    include_directories( ${CMAKE_SOURCE_DIR}/applications/brep_application )
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_USE_BREP")
endif()

if(EXISTS ${CMAKE_SOURCE_DIR}/kratos/solving_strategies/builder_and_solvers/residualbased_elimination_builder_and_solver_deactivation.h)
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};_residualbased_elimination_builder_and_solver_deactivation_existed_")
endif()

find_package(CGAL QUIET)
if(CGAL_FOUND)
    # SET(CGAL_DIR ${CGAL_ROOT}/lib/CGAL)
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_APPLICATION_USE_CGAL")
    set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_APPLICATION_USE_GMP")
    set(ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS "${ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS};${CGAL_INCLUDE_DIR}")
    message(STATUS "CGAL is found at " ${CGAL_ROOT} " and enabled for IsogeometricApplication")
else()
    message(STATUS "CGAL is not found and linked with IsogeometricApplication")
endif()

# set(ISOGEOMETRIC_APPLICATION_COMPILE_DEFS "${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS};ISOGEOMETRIC_DEBUG_DESTROY")

## generate variables with the sources
set( KRATOS_ISOGEOMETRIC_APPLICATION_SOURCES
#    ${PROJECT_SOURCE_DIR}/kratos/sources/io.cpp
#    ${PROJECT_SOURCE_DIR}/kratos/sources/model_part_io.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_io/bezier_model_part_io.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/fespace_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/bezier_utils.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/bspline_utils.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/bezier_post_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/isogeometric_projection_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bsplines_indexing_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bsplines_patch_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bcell_manager.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/domain_manager_2d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/domain_manager_3d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/nurbs/bsplines_projection_utility.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/hbsplines/deprecated_hb_basis_function.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/hbsplines/deprecated_hb_mesh.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/tsplines/tsvertex.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/tsplines/tsmesh_2d.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/import_export/multi_nurbs_patch_geo_importer.cpp
)

if(${ISOGEOMETRIC_USE_TSPLINE} MATCHES TRUE)
    set( KRATOS_ISOGEOMETRIC_APPLICATION_SOURCES
        ${KRATOS_ISOGEOMETRIC_APPLICATION_SOURCES}
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_utilities/import_export/tsplines_patch_tsm_importer.cpp
       )
endif()

set( KRATOS_ISOGEOMETRIC_APPLICATION_SOURCES
    ${KRATOS_ISOGEOMETRIC_APPLICATION_SOURCES}
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_elements/dummy_isogeometric_element.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_conditions/dummy_isogeometric_condition.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/isogeometric_application_variables.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/isogeometric_application.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_io_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_processes_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_backend_utilities_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_frontend_utilities_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_control_point_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_control_grids_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_nurbs_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_pbbsplines_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_hbsplines_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_tsplines_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_mesh_and_model_part_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_patches_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_strategies_to_python.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/isogeometric_python_application.cpp
)

if(ISOGEOMETRIC_USE_BREP MATCHES ON)
    set( KRATOS_ISOGEOMETRIC_BREP_APPLICATION_SOURCES
        ${KRATOS_ISOGEOMETRIC_BREP_APPLICATION_SOURCES}
        ${CMAKE_CURRENT_SOURCE_DIR}/isogeometric_brep_application.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/add_brep_and_level_set_to_python.cpp
        ${CMAKE_CURRENT_SOURCE_DIR}/custom_python/isogeometric_brep_python_application.cpp
    )
endif()

###############################################################
## define library Kratos which defines the basic python interface
add_library(KratosIsogeometricApplication SHARED ${KRATOS_ISOGEOMETRIC_APPLICATION_SOURCES})
if(MSVC)
    target_compile_options(KratosIsogeometricApplication PRIVATE $<$<CONFIG:Debug>:/bigobj>)
    target_compile_options(KratosIsogeometricApplication PRIVATE $<$<CONFIG:RelWithDebInfo>:/bigobj>)
endif()

option(ISOGEOMETRIC_APPLICATION_ENABLE_TESTS "Enable tests of IsogeometricApplication" ON)
if(${ISOGEOMETRIC_APPLICATION_ENABLE_TESTS} MATCHES ON)
    add_subdirectory(tests)
endif()

add_library(KratosIsogeometricApplicationDependencies INTERFACE)

target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE tetgen150)
if(${ISOGEOMETRIC_USE_MPI} MATCHES TRUE)
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${METIS_FOR_IGA_LIBRARY})
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${PARMETIS_FOR_IGA_LIBRARY})
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${MPI_LIBRARIES})
endif()
if(${ISOGEOMETRIC_USE_GISMO} MATCHES TRUE)
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${GISMO_LIBRARY})
endif()
if(${ISOGEOMETRIC_USE_TSPLINE} MATCHES TRUE)
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${TSPLINE_LIBRARIES})
endif()
if(CGAL_FOUND)
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${CGAL_LIBRARIES})
    target_link_libraries(KratosIsogeometricApplicationDependencies INTERFACE ${GMP_LIBRARIES})
endif()
# cotire(KratosIsogeometricApplication)

target_link_libraries(KratosIsogeometricApplication PUBLIC KratosCore)
target_link_libraries(KratosIsogeometricApplication PUBLIC KratosIsogeometricApplicationDependencies)

target_include_directories(KratosIsogeometricApplication PUBLIC ${ISOGEOMETRIC_APPLICATION_INCLUDE_DIRS})
target_include_directories(KratosIsogeometricApplication PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_compile_definitions(KratosIsogeometricApplication PRIVATE KRATOS_CORE=IMPORT)
target_compile_definitions(KratosIsogeometricApplication PRIVATE ISOGEOMETRIC_APPLICATION=EXPORT)
target_compile_definitions(KratosIsogeometricApplication PUBLIC ${ISOGEOMETRIC_APPLICATION_COMPILE_DEFS})

set_target_properties(KratosIsogeometricApplication PROPERTIES PREFIX "")
install(TARGETS KratosIsogeometricApplication DESTINATION libs )

# changing the .dll suffix to .pyd
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    set_target_properties(KratosIsogeometricApplication PROPERTIES SUFFIX .pyd)
endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")

if(ISOGEOMETRIC_USE_BREP MATCHES ON)
    add_library(KratosIsogeometricBRepApplication SHARED ${KRATOS_ISOGEOMETRIC_BREP_APPLICATION_SOURCES})
    target_link_libraries(KratosIsogeometricBRepApplication PRIVATE KratosBRepApplication)
    target_link_libraries(KratosIsogeometricBRepApplication PRIVATE KratosIsogeometricApplication)

    target_compile_definitions(KratosIsogeometricBRepApplication PRIVATE KRATOS_CORE=IMPORT)
    target_compile_definitions(KratosIsogeometricBRepApplication PRIVATE ISOGEOMETRIC_BREP_APPLICATION=EXPORT)
    target_compile_definitions(KratosIsogeometricBRepApplication PRIVATE ISOGEOMETRIC_APPLICATION=IMPORT)
    target_compile_definitions(KratosIsogeometricBRepApplication PRIVATE BREP_APPLICATION=IMPORT)
    set_target_properties(KratosIsogeometricBRepApplication PROPERTIES PREFIX "")
    install(TARGETS KratosIsogeometricBRepApplication DESTINATION libs )

    # changing the .dll suffix to .pyd
    if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
        set_target_properties(KratosIsogeometricBRepApplication PROPERTIES SUFFIX .pyd)
    endif(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
endif()

if(${INSTALL_PYTHON_FILES} MATCHES ON)
  get_filename_component (CURRENT_DIR_NAME ${CMAKE_CURRENT_SOURCE_DIR} NAME)
  install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/python_scripts DESTINATION applications/${CURRENT_DIR_NAME}  FILES_MATCHING PATTERN "*.py"  PATTERN ".svn" EXCLUDE)
endif(${INSTALL_PYTHON_FILES} MATCHES ON)

# get_property(inc_dirs DIRECTORY PROPERTY INCLUDE_DIRECTORIES)
# message("TestApplication subdir inc_dirs = ${inc_dirs}")

# Add to the KratosMultiphysics Python module
install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/IsogeometricApplication.py" DESTINATION KratosMultiphysics)

if(ISOGEOMETRIC_USE_BREP MATCHES ON)
    install(FILES "${CMAKE_CURRENT_SOURCE_DIR}/IsogeometricBRepApplication.py" DESTINATION KratosMultiphysics)
endif()
